/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['object-settings.js']) {
  _$jscoverage['object-settings.js'] = [];
  _$jscoverage['object-settings.js'][8] = 0;
  _$jscoverage['object-settings.js'][11] = 0;
  _$jscoverage['object-settings.js'][12] = 0;
  _$jscoverage['object-settings.js'][15] = 0;
  _$jscoverage['object-settings.js'][16] = 0;
  _$jscoverage['object-settings.js'][17] = 0;
  _$jscoverage['object-settings.js'][20] = 0;
  _$jscoverage['object-settings.js'][30] = 0;
  _$jscoverage['object-settings.js'][32] = 0;
  _$jscoverage['object-settings.js'][35] = 0;
  _$jscoverage['object-settings.js'][36] = 0;
  _$jscoverage['object-settings.js'][39] = 0;
  _$jscoverage['object-settings.js'][41] = 0;
  _$jscoverage['object-settings.js'][53] = 0;
  _$jscoverage['object-settings.js'][54] = 0;
  _$jscoverage['object-settings.js'][57] = 0;
  _$jscoverage['object-settings.js'][67] = 0;
  _$jscoverage['object-settings.js'][78] = 0;
  _$jscoverage['object-settings.js'][79] = 0;
  _$jscoverage['object-settings.js'][88] = 0;
  _$jscoverage['object-settings.js'][89] = 0;
  _$jscoverage['object-settings.js'][92] = 0;
  _$jscoverage['object-settings.js'][95] = 0;
  _$jscoverage['object-settings.js'][110] = 0;
  _$jscoverage['object-settings.js'][111] = 0;
  _$jscoverage['object-settings.js'][120] = 0;
  _$jscoverage['object-settings.js'][121] = 0;
  _$jscoverage['object-settings.js'][125] = 0;
  _$jscoverage['object-settings.js'][128] = 0;
  _$jscoverage['object-settings.js'][131] = 0;
  _$jscoverage['object-settings.js'][133] = 0;
  _$jscoverage['object-settings.js'][138] = 0;
  _$jscoverage['object-settings.js'][140] = 0;
  _$jscoverage['object-settings.js'][143] = 0;
  _$jscoverage['object-settings.js'][144] = 0;
  _$jscoverage['object-settings.js'][145] = 0;
  _$jscoverage['object-settings.js'][151] = 0;
  _$jscoverage['object-settings.js'][162] = 0;
  _$jscoverage['object-settings.js'][163] = 0;
  _$jscoverage['object-settings.js'][171] = 0;
  _$jscoverage['object-settings.js'][182] = 0;
  _$jscoverage['object-settings.js'][188] = 0;
  _$jscoverage['object-settings.js'][189] = 0;
}
_$jscoverage['object-settings.js'][8]++;
require("abstract").createModel(module.exports = (function Settings(exports) {
  _$jscoverage['object-settings.js'][11]++;
  if (module.loaded) {
    _$jscoverage['object-settings.js'][12]++;
    return Settings;
  }
  _$jscoverage['object-settings.js'][15]++;
  var util = require("util");
  _$jscoverage['object-settings.js'][16]++;
  var inherits = require("util").inherits;
  _$jscoverage['object-settings.js'][17]++;
  var _extend = require("util")._extend;
  _$jscoverage['object-settings.js'][20]++;
  Settings.defineProperties(Settings, {mixin: {value: (function mixin(obj) {
  _$jscoverage['object-settings.js'][30]++;
  for (var key in Settings.prototype) {
    _$jscoverage['object-settings.js'][32]++;
    var descriptor = Object.getOwnPropertyDescriptor(obj, key);
    _$jscoverage['object-settings.js'][35]++;
    if (descriptor && ! descriptor.configurable) {
      _$jscoverage['object-settings.js'][36]++;
      break;
    }
    _$jscoverage['object-settings.js'][39]++;
    try {
      _$jscoverage['object-settings.js'][41]++;
      Object.defineProperty(obj, key, {value: obj[key] || Settings.prototype[key], enumerable: false, writable: true, configurable: true});
    }
    catch (error) {
    }
}
  _$jscoverage['object-settings.js'][53]++;
  if (! obj._events) {
    _$jscoverage['object-settings.js'][54]++;
    obj._events = {};
  }
  _$jscoverage['object-settings.js'][57]++;
  return obj;
}), enumerable: true, configurable: true, writable: true}});
  _$jscoverage['object-settings.js'][67]++;
  Settings.properties(Settings.prototype, {get: (function get(key, fallback) {
  _$jscoverage['object-settings.js'][78]++;
  if (! this._meta) {
    _$jscoverage['object-settings.js'][79]++;
    Object.defineProperty(this, "_meta", {value: {}, enumerable: false, writable: true, configurable: true});
  }
  _$jscoverage['object-settings.js'][88]++;
  if ("undefined" === typeof key) {
    _$jscoverage['object-settings.js'][89]++;
    return this._meta || {};
  }
  _$jscoverage['object-settings.js'][92]++;
  var value = require("abstract").utility.query(this._meta, arguments[0]);
  _$jscoverage['object-settings.js'][95]++;
  return value || fallback;
}), set: (function set(key, value) {
  _$jscoverage['object-settings.js'][110]++;
  if (! this._meta) {
    _$jscoverage['object-settings.js'][111]++;
    Object.defineProperty(this, "_meta", {value: {}, enumerable: false, writable: true, configurable: true});
  }
  _$jscoverage['object-settings.js'][120]++;
  if (! arguments) {
    _$jscoverage['object-settings.js'][121]++;
    return this;
  }
  _$jscoverage['object-settings.js'][125]++;
  var emit = this.emit? this.emit.bind(this): (function emit() {
});
  _$jscoverage['object-settings.js'][128]++;
  if (Object.keys(arguments).length === 2 && ("string" === typeof arguments[0] || "number" === typeof arguments[0])) {
    _$jscoverage['object-settings.js'][131]++;
    require("abstract").utility.unwrap(arguments[0], arguments[1], this._meta);
    _$jscoverage['object-settings.js'][133]++;
    emit(["set", arguments[0]], null, arguments[1], arguments[0]);
  }
  _$jscoverage['object-settings.js'][138]++;
  if (Object.keys(arguments).length === 1 && "object" === typeof arguments[0]) {
    _$jscoverage['object-settings.js'][140]++;
    require("util")._extend(this._meta, arguments[0]);
    _$jscoverage['object-settings.js'][143]++;
    for (var key in arguments[0]) {
      _$jscoverage['object-settings.js'][144]++;
      if (arguments[0].hasOwnProperty(key)) {
        _$jscoverage['object-settings.js'][145]++;
        emit(["set", key], null, arguments[0][key], key);
      }
}
  }
  _$jscoverage['object-settings.js'][151]++;
  return this;
}), enable: (function enable(key) {
  _$jscoverage['object-settings.js'][162]++;
  if (! this._meta) {
    _$jscoverage['object-settings.js'][163]++;
    Object.defineProperty(this, "_meta", {value: {}, enumerable: false, writable: true, configurable: true});
  }
  _$jscoverage['object-settings.js'][171]++;
  this._meta[key] = true;
}), disable: (function disable(key) {
  _$jscoverage['object-settings.js'][182]++;
  return this._meta? this._meta[key] = false: null;
})});
  _$jscoverage['object-settings.js'][188]++;
  exports.defineConstructor((function (defaults) {
  _$jscoverage['object-settings.js'][189]++;
  this.set(defaults);
}));
}));
_$jscoverage['object-settings.js'].source = ["/**"," * Create custom objects and methods by aggregating and abstracting esources."," *"," * @version 0.1.0"," * @class Settings"," * @constractor"," */","require( 'abstract' ).createModel( module.exports = function Settings( exports ) {","","  // Construct Model only once.","  if( module.loaded ) {","    return Settings;","  }","","  var util       = require( 'util' );","  var inherits   = require( 'util' ).inherits;","  var _extend    = require( 'util' )._extend;","","  // Constructor Properties","  Settings.defineProperties( Settings, {","    mixin: {","      /**","       * Mixin the Emitter properties.","       *","       * @param {Object} obj","       * @return {Object}","       */","      value: function mixin( obj ) {","","        for( var key in Settings.prototype ) {","","          var descriptor = Object.getOwnPropertyDescriptor( obj, key );","","          // Detect if a property is not configurable.","          if( descriptor &amp;&amp; !descriptor.configurable ) {","            break;","          }","","          try {","","            Object.defineProperty( obj, key, {","              value: obj[ key ] || Settings.prototype[ key ],","              enumerable: false,","              writable: true,","              configurable: true","            });","","          } catch( error ) {}","","        }","","        // Ensure we have an listener container.","        if( !obj._events ) {","          obj._events = {};","        }","","        return obj;","","      },","      enumerable: true,","      configurable: true,","      writable: true","    }","  });","","  // Prototypal Properties","  Settings.properties( Settings.prototype, {","","    /**","     * Get or create and get storage","     *","     * @param key {String}","     * @returns {*|undefined}","     */","    get: function get( key, fallback ) {","","      // Create object meta if it does not exist","      if( !this._meta ) {","        Object.defineProperty( this, '_meta', {","          value: {},","          enumerable: false,","          writable: true,","          configurable: true","        });","      }","","      // Return empty full meta object if no key specified","      if( 'undefined' === typeof key ) {","        return this._meta || {};","      }","","      var value = require( 'abstract' ).utility.query( this._meta, arguments[0] );","","      // Return the found value or the fallback value","      return value || fallback;","","    },","","    /**","     * Set Key &amp; Value pair, or pass an object","     *","     * @method key","     * @param key {String|Object}","     * @param value {Any}","     * @returns {Object} Context.","     */","    set: function set( key, value ) {","","      // Create object meta if it does not exist","      if( !this._meta ) {","        Object.defineProperty( this, '_meta', {","          value: {},","          enumerable: false,","          writable: true,","          configurable: true","        });","      }","","      // Not passing any arguments can be used to instantiate","      if( !arguments ) {","        return this;","      }","","      // Wrapper for Emit","      var emit = this.emit ? this.emit.bind( this ) : function emit() {};","","      // Key &amp; Value Passed","      if( Object.keys( arguments ).length === 2 &amp;&amp; ( 'string' === typeof arguments[0] || 'number' === typeof arguments[0] ) ) {","","        // Honor dot notation","        require( 'abstract' ).utility.unwrap( arguments[0], arguments[1], this._meta );","","        emit( [ 'set', arguments[0] ], null, arguments[1], arguments[0] );","","      }","","      // Object Passed, extend","      if( Object.keys( arguments ).length === 1 &amp;&amp; 'object' === typeof arguments[0] ) {","","        require( 'util' )._extend( this._meta, arguments[0] );","","        // @todo Get object path using dot notation","        for( var key in arguments[0] ) {","          if( arguments[0].hasOwnProperty( key ) ) {","            emit( [ 'set', key ], null, arguments[0][key], key );","          }","        }","","      }","","      return this;","","    },","","    /**","     * Enable an Option","     *","     * @param key","     */","    enable: function enable( key ) {","","      if( !this._meta ) {","        Object.defineProperty( this, '_meta', {","          value: {},","          enumerable: false,","          writable: true,","          configurable: true","        });","      }","","      this._meta[ key ] = true;","","    },","","    /**","     * Disable an Option","     *","     * @param key","     * @returns {boolean}","     */","    disable: function disable( key ) {","      return this._meta ? this._meta[ key ] = false : null;","    }","","  });","","  // Define instance constructor and bind to module.exports","  exports.defineConstructor( function( defaults ) {","    this.set( defaults );","  });","","});",""];
