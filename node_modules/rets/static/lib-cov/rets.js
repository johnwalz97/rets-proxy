/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['rets.js']) {
  _$jscoverage['rets.js'] = [];
  _$jscoverage['rets.js'][27] = 0;
  _$jscoverage['rets.js'][30] = 0;
  _$jscoverage['rets.js'][31] = 0;
  _$jscoverage['rets.js'][34] = 0;
  _$jscoverage['rets.js'][35] = 0;
  _$jscoverage['rets.js'][36] = 0;
  _$jscoverage['rets.js'][39] = 0;
  _$jscoverage['rets.js'][40] = 0;
  _$jscoverage['rets.js'][43] = 0;
  _$jscoverage['rets.js'][49] = 0;
  _$jscoverage['rets.js'][52] = 0;
  _$jscoverage['rets.js'][61] = 0;
  _$jscoverage['rets.js'][63] = 0;
  _$jscoverage['rets.js'][64] = 0;
  _$jscoverage['rets.js'][66] = 0;
  _$jscoverage['rets.js'][72] = 0;
  _$jscoverage['rets.js'][76] = 0;
  _$jscoverage['rets.js'][79] = 0;
  _$jscoverage['rets.js'][80] = 0;
  _$jscoverage['rets.js'][81] = 0;
  _$jscoverage['rets.js'][84] = 0;
  _$jscoverage['rets.js'][88] = 0;
  _$jscoverage['rets.js'][89] = 0;
  _$jscoverage['rets.js'][93] = 0;
  _$jscoverage['rets.js'][94] = 0;
  _$jscoverage['rets.js'][98] = 0;
  _$jscoverage['rets.js'][99] = 0;
  _$jscoverage['rets.js'][100] = 0;
  _$jscoverage['rets.js'][103] = 0;
  _$jscoverage['rets.js'][104] = 0;
  _$jscoverage['rets.js'][105] = 0;
  _$jscoverage['rets.js'][108] = 0;
  _$jscoverage['rets.js'][109] = 0;
  _$jscoverage['rets.js'][110] = 0;
  _$jscoverage['rets.js'][111] = 0;
  _$jscoverage['rets.js'][112] = 0;
  _$jscoverage['rets.js'][115] = 0;
  _$jscoverage['rets.js'][116] = 0;
  _$jscoverage['rets.js'][123] = 0;
  _$jscoverage['rets.js'][124] = 0;
  _$jscoverage['rets.js'][125] = 0;
  _$jscoverage['rets.js'][126] = 0;
  _$jscoverage['rets.js'][130] = 0;
  _$jscoverage['rets.js'][131] = 0;
  _$jscoverage['rets.js'][132] = 0;
  _$jscoverage['rets.js'][138] = 0;
  _$jscoverage['rets.js'][146] = 0;
  _$jscoverage['rets.js'][160] = 0;
  _$jscoverage['rets.js'][161] = 0;
  _$jscoverage['rets.js'][162] = 0;
  _$jscoverage['rets.js'][165] = 0;
  _$jscoverage['rets.js'][168] = 0;
  _$jscoverage['rets.js'][169] = 0;
  _$jscoverage['rets.js'][171] = 0;
  _$jscoverage['rets.js'][187] = 0;
  _$jscoverage['rets.js'][188] = 0;
  _$jscoverage['rets.js'][191] = 0;
  _$jscoverage['rets.js'][193] = 0;
  _$jscoverage['rets.js'][194] = 0;
  _$jscoverage['rets.js'][198] = 0;
  _$jscoverage['rets.js'][204] = 0;
  _$jscoverage['rets.js'][223] = 0;
  _$jscoverage['rets.js'][228] = 0;
  _$jscoverage['rets.js'][249] = 0;
  _$jscoverage['rets.js'][250] = 0;
  _$jscoverage['rets.js'][251] = 0;
  _$jscoverage['rets.js'][254] = 0;
  _$jscoverage['rets.js'][256] = 0;
  _$jscoverage['rets.js'][258] = 0;
  _$jscoverage['rets.js'][259] = 0;
  _$jscoverage['rets.js'][262] = 0;
  _$jscoverage['rets.js'][263] = 0;
  _$jscoverage['rets.js'][266] = 0;
  _$jscoverage['rets.js'][267] = 0;
  _$jscoverage['rets.js'][271] = 0;
  _$jscoverage['rets.js'][280] = 0;
  _$jscoverage['rets.js'][282] = 0;
  _$jscoverage['rets.js'][285] = 0;
  _$jscoverage['rets.js'][288] = 0;
  _$jscoverage['rets.js'][289] = 0;
  _$jscoverage['rets.js'][292] = 0;
  _$jscoverage['rets.js'][293] = 0;
  _$jscoverage['rets.js'][294] = 0;
  _$jscoverage['rets.js'][296] = 0;
  _$jscoverage['rets.js'][301] = 0;
  _$jscoverage['rets.js'][306] = 0;
  _$jscoverage['rets.js'][309] = 0;
  _$jscoverage['rets.js'][310] = 0;
  _$jscoverage['rets.js'][311] = 0;
  _$jscoverage['rets.js'][314] = 0;
  _$jscoverage['rets.js'][315] = 0;
  _$jscoverage['rets.js'][319] = 0;
  _$jscoverage['rets.js'][323] = 0;
  _$jscoverage['rets.js'][327] = 0;
  _$jscoverage['rets.js'][330] = 0;
  _$jscoverage['rets.js'][331] = 0;
  _$jscoverage['rets.js'][332] = 0;
  _$jscoverage['rets.js'][338] = 0;
  _$jscoverage['rets.js'][351] = 0;
  _$jscoverage['rets.js'][374] = 0;
}
_$jscoverage['rets.js'][27]++;
function RETS(settings, cb) {
  _$jscoverage['rets.js'][30]++;
  if (! (this instanceof RETS)) {
    _$jscoverage['rets.js'][31]++;
    return new RETS(settings, cb);
  }
  _$jscoverage['rets.js'][34]++;
  var Instance = this;
  _$jscoverage['rets.js'][35]++;
  var extend = require("extend");
  _$jscoverage['rets.js'][36]++;
  var digest = require("./digest");
  _$jscoverage['rets.js'][39]++;
  require("object-settings").mixin(Instance);
  _$jscoverage['rets.js'][40]++;
  require("object-emitter").mixin(Instance);
  _$jscoverage['rets.js'][43]++;
  Instance.set({settings: settings, digest: true, property: "Property"});
  _$jscoverage['rets.js'][49]++;
  var _connection_data = [];
  _$jscoverage['rets.js'][52]++;
  digest(settings.user, settings.pass).request({host: settings.host, path: settings.path, port: settings.port || 80, method: "GET", headers: settings.headers || {"User-Agent": "NODE-RETS/1.0"}}, (function authorization(res) {
  _$jscoverage['rets.js'][61]++;
  this.on("error", (function error(error) {
  _$jscoverage['rets.js'][63]++;
  if (error.message === "ECONNRESET") {
    _$jscoverage['rets.js'][64]++;
    Instance.emit("connection.closed", Instance);
  }
  else {
    _$jscoverage['rets.js'][66]++;
    console.error("Uncaught RETS error:", error.message);
  }
}));
  _$jscoverage['rets.js'][72]++;
  res.on("end", (function digest_end() {
  _$jscoverage['rets.js'][76]++;
  Instance.set("headers", this.headers);
  _$jscoverage['rets.js'][79]++;
  Instance.set("rets.version", this.headers["rets-version"]);
  _$jscoverage['rets.js'][80]++;
  Instance.set("rets.server", this.headers.server);
  _$jscoverage['rets.js'][81]++;
  Instance.set("rets.cookie", this.headers["set-cookie"]);
  _$jscoverage['rets.js'][84]++;
  Instance._parse(_connection_data, (function parsed(error, connection_data) {
  _$jscoverage['rets.js'][88]++;
  if (error) {
    _$jscoverage['rets.js'][89]++;
    return Instance.emit("connection.parse.error", error, connection_data);
  }
  _$jscoverage['rets.js'][93]++;
  if (connection_data.code != 0) {
    _$jscoverage['rets.js'][94]++;
    return Instance.emit("connection.error", new Error("Connection response code not the expected 0."), connection_data);
  }
  _$jscoverage['rets.js'][98]++;
  Instance.set("provider.name", connection_data.data.MemberName);
  _$jscoverage['rets.js'][99]++;
  Instance.set("provider.user", connection_data.data.User);
  _$jscoverage['rets.js'][100]++;
  Instance.set("provider.broker", connection_data.data.Broker);
  _$jscoverage['rets.js'][103]++;
  Instance.set("meta.version", connection_data.data.MetadataVersion);
  _$jscoverage['rets.js'][104]++;
  Instance.set("meta.min_version", connection_data.data.MinMetadataVersion);
  _$jscoverage['rets.js'][105]++;
  Instance.set("meta.timestamp", connection_data.data.MetadataTimestamp);
  _$jscoverage['rets.js'][108]++;
  Instance.set("url.get_meta", connection_data.data.GetMetadata);
  _$jscoverage['rets.js'][109]++;
  Instance.set("url.get_object", connection_data.data.GetObject);
  _$jscoverage['rets.js'][110]++;
  Instance.set("url.login", connection_data.data.Login);
  _$jscoverage['rets.js'][111]++;
  Instance.set("url.logout", connection_data.data.Logout);
  _$jscoverage['rets.js'][112]++;
  Instance.set("url.search", connection_data.data.Search);
  _$jscoverage['rets.js'][115]++;
  Instance.emit("connection", null, Instance);
  _$jscoverage['rets.js'][116]++;
  Instance.emit("connection.success", Instance);
}));
}));
  _$jscoverage['rets.js'][123]++;
  res.on("error", (function digest_error(error) {
  _$jscoverage['rets.js'][124]++;
  Instance.emit("connection", error, Instance);
  _$jscoverage['rets.js'][125]++;
  Instance.emit("connection.error", error, Instance);
  _$jscoverage['rets.js'][126]++;
  RETS.debug(error);
}));
  _$jscoverage['rets.js'][130]++;
  res.on("data", (function digest_data(data) {
  _$jscoverage['rets.js'][131]++;
  _connection_data.push(data.toString());
  _$jscoverage['rets.js'][132]++;
  RETS.debug("data", data.toString());
}));
}));
  _$jscoverage['rets.js'][138]++;
  return this;
}
_$jscoverage['rets.js'][146]++;
Object.defineProperties(RETS.prototype, {request: {value: (function request(query, cb) {
  _$jscoverage['rets.js'][160]++;
  var Instance = this;
  _$jscoverage['rets.js'][161]++;
  var request = require("request");
  _$jscoverage['rets.js'][162]++;
  var parse = require("xml2js").parseString;
  _$jscoverage['rets.js'][165]++;
  var url = "http://www.parmls.com/SERetsPensacola/GetMetadata.aspx";
  _$jscoverage['rets.js'][168]++;
  query = "object" === typeof query? {Type: "METADATA-CLASS"}: query;
  _$jscoverage['rets.js'][169]++;
  cb = "function" === typeof cb? cb: (function default_callback() {
});
  _$jscoverage['rets.js'][171]++;
  request({method: "GET", url: url, qs: {Type: query.type || "METADATA-CLASS", ID: query.id || "Property", Format: "STANDARD-XML"}, auth: {user: Instance.get("settings.user"), pass: Instance.get("settings.pass"), sendImmediately: false}}, (function response(error, res, body) {
  _$jscoverage['rets.js'][187]++;
  if (error) {
    _$jscoverage['rets.js'][188]++;
    return Instance.emit("request.error", error, res, cb(error, res));
  }
  _$jscoverage['rets.js'][191]++;
  Instance._parse(body, (function parsed(error, data) {
  _$jscoverage['rets.js'][193]++;
  if (error) {
    _$jscoverage['rets.js'][194]++;
    return Instance.emit("request.parse.error", error, res, cb(error, res));
  }
  _$jscoverage['rets.js'][198]++;
  return Instance.emit(["request", query.Type.toLowerCase(), "complete"].join("."), null, data, cb(null, data));
}));
}));
  _$jscoverage['rets.js'][204]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, get_classifications: {value: (function get_classifications(cb) {
  _$jscoverage['rets.js'][223]++;
  this.request({type: "METADATA-CLASS", id: "Property"}, cb);
  _$jscoverage['rets.js'][228]++;
  return this;
}), enumerable: true, configurable: true, writable: true}, _parse: {value: (function _parse(data, cb) {
  _$jscoverage['rets.js'][249]++;
  var Instance = this;
  _$jscoverage['rets.js'][250]++;
  var parse = require("xml2js").parseString;
  _$jscoverage['rets.js'][251]++;
  var _ = require("lodash");
  _$jscoverage['rets.js'][254]++;
  parse(data, (function xml_parsed(error, data) {
  _$jscoverage['rets.js'][256]++;
  try {
    _$jscoverage['rets.js'][258]++;
    if (error) {
      _$jscoverage['rets.js'][259]++;
      throw new Error("Response parse error: " + error.message);
    }
    _$jscoverage['rets.js'][262]++;
    if (! data) {
      _$jscoverage['rets.js'][263]++;
      throw new Error("No data to parse.");
    }
    _$jscoverage['rets.js'][266]++;
    if ("object" !== typeof data.RETS) {
      _$jscoverage['rets.js'][267]++;
      throw new Error("Response does not contain a proper RETS property. ");
    }
    _$jscoverage['rets.js'][271]++;
    var parsed = {code: data.RETS.$.ReplyCode, text: data.RETS.$.ReplyText, type: undefined, resource: undefined, data: {}};
    _$jscoverage['rets.js'][280]++;
    if (data.RETS["RETS-RESPONSE"]) {
      _$jscoverage['rets.js'][282]++;
      parsed.type = "connection";
      _$jscoverage['rets.js'][285]++;
      data.RETS["RETS-RESPONSE"][0].split("\r\n,").forEach((function line_parser(line, index) {
  _$jscoverage['rets.js'][288]++;
  if (! line) {
    _$jscoverage['rets.js'][289]++;
    return;
  }
  _$jscoverage['rets.js'][292]++;
  var split = line.split("=");
  _$jscoverage['rets.js'][293]++;
  var key = split[0].replace(/^\s+|\s+$/g, "");
  _$jscoverage['rets.js'][294]++;
  var value = split[1].replace(/^\s+|\s+$/g, "");
  _$jscoverage['rets.js'][296]++;
  parsed.data[key] = value;
}));
      _$jscoverage['rets.js'][301]++;
      return cb(null, parsed);
    }
    _$jscoverage['rets.js'][306]++;
    if (data.RETS.METADATA && _.first(data.RETS.METADATA)) {
      _$jscoverage['rets.js'][309]++;
      if (_.first(data.RETS.METADATA[0]["METADATA-CLASS"])) {
        _$jscoverage['rets.js'][310]++;
        parsed.type = "classifications";
        _$jscoverage['rets.js'][311]++;
        parsed.resource = data.RETS.METADATA[0]["METADATA-CLASS"][0].$.Resource;
        _$jscoverage['rets.js'][314]++;
        data.RETS.METADATA[0]["METADATA-CLASS"][0].Class.forEach((function iterate(class_data) {
  _$jscoverage['rets.js'][315]++;
  parsed.data[class_data.ClassName] = class_data;
}));
        _$jscoverage['rets.js'][319]++;
        return cb(null, parsed);
      }
      _$jscoverage['rets.js'][323]++;
      throw new Error("Unknown RETS METADATA response sub-type.");
    }
    _$jscoverage['rets.js'][327]++;
    throw new Error("Unknown RETS response type, could not identify nor parse.");
  }
  catch (error) {
    _$jscoverage['rets.js'][330]++;
    console.error("Paser Error:", error.message, error);
    _$jscoverage['rets.js'][331]++;
    RETS.debug(error.message);
    _$jscoverage['rets.js'][332]++;
    cb(error, parsed);
  }
}));
  _$jscoverage['rets.js'][338]++;
  return this;
}), enumerable: false, configurable: true, writable: true}});
_$jscoverage['rets.js'][351]++;
Object.defineProperties(module.exports = RETS, {debug: {value: require("debug")("RETS"), enumerable: true, configurable: true, writable: true}, createConnection: {value: (function createConnection(settings, cb) {
  _$jscoverage['rets.js'][374]++;
  return new RETS(settings, cb);
}), enumerable: true, configurable: true, writable: true}});
_$jscoverage['rets.js'].source = ["/**"," * RETS Client"," * ==========="," *"," * ### Event Types"," * - digest.error"," * - connection: General connection event - could mean success or error."," * - connection.success: Successful connection only"," * - connection.error: General connection error."," * - connection.parse.error: General connection parsing error."," * - connection.closed: Digest authentication connection closed."," * - request.error: General request error."," * - request.parse.error: Request successful, but parsing failed."," * - request.{TYPE}.complete: Request complete."," * - get_meta.complete: Meta loaded"," *"," * ### Response Types"," * classes -"," *"," * @constructor"," * @module RETS"," * @param settings"," * @param cb"," * @returns {*}"," * @constructor"," */","function RETS( settings, cb ) {","","  // Make sure context is correct otherwise we could screw up the global scope.","  if( !( this instanceof RETS ) ) {","    return new RETS( settings, cb );","  }","","  var Instance      = this;","  var extend        = require( 'extend' );","  var digest        = require( './digest' );","","  // Mixin Settings and EventEmitter","  require( 'object-settings' ).mixin( Instance );","  require( 'object-emitter' ).mixin( Instance );","","  // Configure Instance.","  Instance.set({","    settings: settings,","    digest: true,","    property: 'Property'","  });","","  var _connection_data = [];","","  // Make Authentication Request.","  digest( settings.user, settings.pass ).request({","    host: settings.host,","    path: settings.path,","    port: settings.port || 80,","    method: 'GET',","    headers: settings.headers || { \"User-Agent\": \"NODE-RETS/1.0\" }","  }, function authorization( res ) {","","    // e.g. ECONNRESET","    this.on( 'error', function error( error ) {","","      if( error.message === 'ECONNRESET' ) {","        Instance.emit( 'connection.closed', Instance );","      } else {","        console.error( 'Uncaught RETS error:', error.message );","      }","","    });","","    // Connection complete.","    res.on( 'end', function digest_end() {","      // RETS.debug( 'end' );","","      // Save authentication response headers.","      Instance.set( 'headers', this.headers )","","      // Save RETS-server details.","      Instance.set( 'rets.version', this.headers[ 'rets-version' ] )","      Instance.set( 'rets.server', this.headers[ 'server' ] )","      Instance.set( 'rets.cookie', this.headers[ 'set-cookie' ] )","","      // Parse connection data.","      Instance._parse( _connection_data, function parsed( error, connection_data ) {","","","        // Parse Error of connection data.","        if( error ) {","          return Instance.emit( 'connection.parse.error', error, connection_data );","        }","","        // Connection response code must be 0.","        if( connection_data.code != 0 ) {","          return Instance.emit( 'connection.error', new Error( 'Connection response code not the expected 0.' ), connection_data );","        }","","        // Save general provider information.","        Instance.set( 'provider.name', connection_data.data.MemberName );","        Instance.set( 'provider.user', connection_data.data.User );","        Instance.set( 'provider.broker', connection_data.data.Broker );","","        // Save meta data.","        Instance.set( 'meta.version', connection_data.data.MetadataVersion );","        Instance.set( 'meta.min_version', connection_data.data.MinMetadataVersion );","        Instance.set( 'meta.timestamp', connection_data.data.MetadataTimestamp );","","        // Save connection URLs.","        Instance.set( 'url.get_meta', connection_data.data.GetMetadata );","        Instance.set( 'url.get_object', connection_data.data.GetObject );","        Instance.set( 'url.login', connection_data.data.Login );","        Instance.set( 'url.logout', connection_data.data.Logout );","        Instance.set( 'url.search', connection_data.data.Search );","","        // Emit connection success.","        Instance.emit( 'connection', null, Instance );","        Instance.emit( 'connection.success', Instance );","","      });","","    });","","    // Connection failure.","    res.on( 'error', function digest_error( error ) {","      Instance.emit( 'connection', error, Instance );","      Instance.emit( 'connection.error', error, Instance );","      RETS.debug( error );","    });","","    // Connection data.","    res.on( 'data', function digest_data( data ) {","      _connection_data.push( data.toString() );","      RETS.debug( 'data', data.toString() );","    });","","  });","","  // Return context.","  return this;","","}","","/**"," * RETS Instance Properties."," *"," */","Object.defineProperties( RETS.prototype, {","  request: {","    /**","     * Abstract RETS Query wrapper.","     *","     * @async","     * @method request","     * @param type","     * @param query","     * @param cb","     * @returns {*}","     */","    value: function request( query, cb ) {","","      var Instance      = this;","      var request       = require( 'request' );","      var parse         = require( 'xml2js' ).parseString;","","      // DEBUG","      var url = \"http://www.parmls.com/SERetsPensacola/GetMetadata.aspx\";","","      // Normalize parametrs.","      query   = 'object' === typeof query ? { Type: 'METADATA-CLASS' } : query;","      cb      = 'function' === typeof cb ? cb : function default_callback() {}","","      request({","        method: 'GET',","        url: url,","        qs: {","          Type: query.type || 'METADATA-CLASS',","          ID: query.id || 'Property',","          Format: 'STANDARD-XML'","        },","        auth: {","          user: Instance.get( 'settings.user' ),","          pass: Instance.get( 'settings.pass' ),","          sendImmediately: false","        }","      }, function response( error, res, body ) {","","        // Request error.","        if( error ) {","          return Instance.emit( 'request.error', error, res, cb( error, res ) );","        }","","        Instance._parse( body, function parsed( error, data ) {","","          if( error ) {","            return Instance.emit( 'request.parse.error', error, res, cb( error, res ) );","          }","","          // Emit response and trigger callback.","          return Instance.emit( [ 'request', query.Type.toLowerCase(), 'complete' ].join( '.' ), null, data, cb( null, data ) );","","        });","","      });","","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  get_classifications: {","    /**","     * Get Classification Meta Data","     *","     * @async","     * @chainable","     * @method get_classifications","     * @param cb {Function} Callback function.","     * @returns {Object} Context","     */","    value: function get_classifications( cb ) {","","      this.request({","        type: 'METADATA-CLASS',","        id: 'Property'","      }, cb );","","      return this;","","    },","    enumerable: true,","    configurable: true,","    writable: true","  },","  _parse: {","    /**","     * Parse RETS response and return an Object.","     *","     * @async","     * @chainable","     * @method _parse","     * @private","     *","     * @param data {String}","     * @returns {*} Instance.","     */","    value: function _parse( data, cb ) {","","      var Instance      = this;","      var parse         = require( 'xml2js' ).parseString;","      var _             = require( 'lodash' );","","      // Parse XML","      parse( data, function xml_parsed( error, data ) {","","        try {","","          if( error ) {","            throw new Error( 'Response parse error: ' + error.message );","          }","","          if( !data ) {","            throw new Error( 'No data to parse.' );","          }","","          if( 'object' !== typeof data.RETS ) {","            throw new Error( 'Response does not contain a proper RETS property. ' );","          }","","          // Standard response code and text, response type and empty data container.","          var parsed = {","            code: data.RETS[ '$' ].ReplyCode,","            text: data.RETS[ '$' ].ReplyText,","            type: undefined,","            resource: undefined,","            data: {}","          };","","          // Connection data. @wiki: https://github.com/UsabilityDynamics/node-rets/wiki/Connection-Response","          if( data.RETS[ 'RETS-RESPONSE' ] ) {","","            parsed.type = 'connection';","","            // Iterate through each line and convert to key and value pair.","            data.RETS[ 'RETS-RESPONSE' ][0].split( \"\\r\\n,\" ).forEach( function line_parser( line, index ) {","","              // Ignore completely blank lines.","              if( !line ) {","                return;","              }","","              var split   = line.split( '=' );","              var key     =  split[0].replace(/^\\s+|\\s+$/g, '' );","              var value   =  split[1].replace(/^\\s+|\\s+$/g, '' );","","              parsed.data[ key ] = value;","","            });","","            // Trigger callback with parsed data.","            return cb( null, parsed );","","          }","","          // Some sort of meta.","          if( data.RETS[ 'METADATA' ] &amp;&amp; _.first( data.RETS[ 'METADATA' ] ) ) {","","            // Classification meta.","            if( _.first( data.RETS[ 'METADATA' ][0][ 'METADATA-CLASS' ] ) ) {","              parsed.type = 'classifications';","              parsed.resource = data.RETS[ 'METADATA' ][0][ 'METADATA-CLASS' ][0]['$'].Resource;","","              // Iterate through each class data type and create object","              data.RETS[ 'METADATA' ][0][ 'METADATA-CLASS' ][0].Class.forEach( function iterate( class_data ) {","                parsed.data[ class_data.ClassName ] = class_data;","              });","","              // Trigger callback with parsed data.","              return cb( null, parsed );","","            }","","            throw new Error( 'Unknown RETS METADATA response sub-type.' );","","          }","","          throw new Error( 'Unknown RETS response type, could not identify nor parse.' );","","        } catch( error ) {","          console.error( 'Paser Error:', error.message, error );","          RETS.debug( error.message );","          cb( error, parsed )","        }","","      });","","      // Chainable.","      return this;","","    },","    enumerable: false,","    configurable: true,","    writable: true","  }","});","","/**"," * RETS Constructor Properties."," *"," */","Object.defineProperties( module.exports = RETS, {","  debug: {","    /**","     * RETS Debugger","     *","     * @esample","     *    RETS.debug( 'Debug Mesage' );","     *","     */","    value: require( 'debug' )( 'RETS' ),","    enumerable: true,","    configurable: true,","    writable: true","  },","  createConnection: {","    /**","     * Create new Connection","     *","     * @param settings","     * @param cb","     * @returns {RETS}","     */","    value: function createConnection( settings, cb ) {","      return new RETS( settings, cb )","    },","    enumerable: true,","    configurable: true,","    writable: true","  }","});"];
