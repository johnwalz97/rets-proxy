/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['digest.js']) {
  _$jscoverage['digest.js'] = [];
  _$jscoverage['digest.js'][8] = 0;
  _$jscoverage['digest.js'][9] = 0;
  _$jscoverage['digest.js'][10] = 0;
  _$jscoverage['digest.js'][12] = 0;
  _$jscoverage['digest.js'][13] = 0;
  _$jscoverage['digest.js'][14] = 0;
  _$jscoverage['digest.js'][15] = 0;
  _$jscoverage['digest.js'][23] = 0;
  _$jscoverage['digest.js'][24] = 0;
  _$jscoverage['digest.js'][25] = 0;
  _$jscoverage['digest.js'][26] = 0;
  _$jscoverage['digest.js'][35] = 0;
  _$jscoverage['digest.js'][36] = 0;
  _$jscoverage['digest.js'][37] = 0;
  _$jscoverage['digest.js'][38] = 0;
  _$jscoverage['digest.js'][39] = 0;
  _$jscoverage['digest.js'][40] = 0;
  _$jscoverage['digest.js'][43] = 0;
  _$jscoverage['digest.js'][44] = 0;
  _$jscoverage['digest.js'][45] = 0;
  _$jscoverage['digest.js'][46] = 0;
  _$jscoverage['digest.js'][47] = 0;
  _$jscoverage['digest.js'][48] = 0;
  _$jscoverage['digest.js'][49] = 0;
  _$jscoverage['digest.js'][53] = 0;
  _$jscoverage['digest.js'][54] = 0;
  _$jscoverage['digest.js'][59] = 0;
  _$jscoverage['digest.js'][60] = 0;
  _$jscoverage['digest.js'][61] = 0;
  _$jscoverage['digest.js'][64] = 0;
  _$jscoverage['digest.js'][65] = 0;
  _$jscoverage['digest.js'][66] = 0;
  _$jscoverage['digest.js'][69] = 0;
  _$jscoverage['digest.js'][78] = 0;
  _$jscoverage['digest.js'][79] = 0;
  _$jscoverage['digest.js'][80] = 0;
  _$jscoverage['digest.js'][83] = 0;
  _$jscoverage['digest.js'][84] = 0;
  _$jscoverage['digest.js'][85] = 0;
  _$jscoverage['digest.js'][87] = 0;
  _$jscoverage['digest.js'][88] = 0;
  _$jscoverage['digest.js'][95] = 0;
  _$jscoverage['digest.js'][96] = 0;
  _$jscoverage['digest.js'][97] = 0;
  _$jscoverage['digest.js'][98] = 0;
  _$jscoverage['digest.js'][99] = 0;
  _$jscoverage['digest.js'][100] = 0;
  _$jscoverage['digest.js'][102] = 0;
  _$jscoverage['digest.js'][105] = 0;
  _$jscoverage['digest.js'][108] = 0;
  _$jscoverage['digest.js'][109] = 0;
  _$jscoverage['digest.js'][114] = 0;
  _$jscoverage['digest.js'][120] = 0;
  _$jscoverage['digest.js'][121] = 0;
  _$jscoverage['digest.js'][122] = 0;
  _$jscoverage['digest.js'][123] = 0;
  _$jscoverage['digest.js'][125] = 0;
  _$jscoverage['digest.js'][131] = 0;
  _$jscoverage['digest.js'][132] = 0;
  _$jscoverage['digest.js'][133] = 0;
  _$jscoverage['digest.js'][134] = 0;
  _$jscoverage['digest.js'][135] = 0;
  _$jscoverage['digest.js'][137] = 0;
  _$jscoverage['digest.js'][138] = 0;
  _$jscoverage['digest.js'][139] = 0;
  _$jscoverage['digest.js'][143] = 0;
  _$jscoverage['digest.js'][147] = 0;
  _$jscoverage['digest.js'][148] = 0;
}
_$jscoverage['digest.js'][8]++;
var HTTPDigest = (function () {
  _$jscoverage['digest.js'][9]++;
  var crypto = require("crypto");
  _$jscoverage['digest.js'][10]++;
  var http = require("http");
  _$jscoverage['digest.js'][12]++;
  var HTTPDigest = (function (username, password) {
  _$jscoverage['digest.js'][13]++;
  this.nc = 0;
  _$jscoverage['digest.js'][14]++;
  this.username = username;
  _$jscoverage['digest.js'][15]++;
  this.password = password;
});
  _$jscoverage['digest.js'][23]++;
  HTTPDigest.prototype.request = (function (options, callback) {
  _$jscoverage['digest.js'][24]++;
  var self = this;
  _$jscoverage['digest.js'][25]++;
  http.request(options, (function (res) {
  _$jscoverage['digest.js'][26]++;
  self._handleResponse(options, res, callback.bind(this));
})).end();
});
  _$jscoverage['digest.js'][35]++;
  HTTPDigest.prototype._handleResponse = (function handleResponse(options, res, callback) {
  _$jscoverage['digest.js'][36]++;
  var challenge = this._parseChallenge(res.headers["www-authenticate"]);
  _$jscoverage['digest.js'][37]++;
  var ha1 = crypto.createHash("md5");
  _$jscoverage['digest.js'][38]++;
  ha1.update([this.username, challenge.realm, this.password].join(":"));
  _$jscoverage['digest.js'][39]++;
  var ha2 = crypto.createHash("md5");
  _$jscoverage['digest.js'][40]++;
  ha2.update([options.method, options.path].join(":"));
  _$jscoverage['digest.js'][43]++;
  var cnonce = false;
  _$jscoverage['digest.js'][44]++;
  var nc = false;
  _$jscoverage['digest.js'][45]++;
  if (typeof challenge.qop === "string") {
    _$jscoverage['digest.js'][46]++;
    var cnonceHash = crypto.createHash("md5");
    _$jscoverage['digest.js'][47]++;
    cnonceHash.update(Math.random().toString(36));
    _$jscoverage['digest.js'][48]++;
    cnonce = cnonceHash.digest("hex").substr(0, 8);
    _$jscoverage['digest.js'][49]++;
    nc = this.updateNC();
  }
  _$jscoverage['digest.js'][53]++;
  var response = crypto.createHash("md5");
  _$jscoverage['digest.js'][54]++;
  var responseParams = [ha1.digest("hex"), challenge.nonce];
  _$jscoverage['digest.js'][59]++;
  if (cnonce) {
    _$jscoverage['digest.js'][60]++;
    responseParams.push(nc);
    _$jscoverage['digest.js'][61]++;
    responseParams.push(cnonce);
  }
  _$jscoverage['digest.js'][64]++;
  responseParams.push(challenge.qop);
  _$jscoverage['digest.js'][65]++;
  responseParams.push(ha2.digest("hex"));
  _$jscoverage['digest.js'][66]++;
  response.update(responseParams.join(":"));
  _$jscoverage['digest.js'][69]++;
  var authParams = {username: this.username, realm: challenge.realm, nonce: challenge.nonce, uri: options.path, qop: challenge.qop, response: response.digest("hex"), opaque: challenge.opaque};
  _$jscoverage['digest.js'][78]++;
  if (cnonce) {
    _$jscoverage['digest.js'][79]++;
    authParams.nc = nc;
    _$jscoverage['digest.js'][80]++;
    authParams.cnonce = cnonce;
  }
  _$jscoverage['digest.js'][83]++;
  var headers = options.headers || {};
  _$jscoverage['digest.js'][84]++;
  headers.Authorization = this._compileParams(authParams);
  _$jscoverage['digest.js'][85]++;
  options.headers = headers;
  _$jscoverage['digest.js'][87]++;
  http.request(options, (function (res) {
  _$jscoverage['digest.js'][88]++;
  callback(res);
})).end();
});
  _$jscoverage['digest.js'][95]++;
  HTTPDigest.prototype._parseChallenge = (function parseChallenge(digest) {
  _$jscoverage['digest.js'][96]++;
  var prefix = "Digest ";
  _$jscoverage['digest.js'][97]++;
  var challenge = digest.substr(digest.indexOf(prefix) + prefix.length);
  _$jscoverage['digest.js'][98]++;
  var parts = challenge.split(",");
  _$jscoverage['digest.js'][99]++;
  var length = parts.length;
  _$jscoverage['digest.js'][100]++;
  var params = {};
  _$jscoverage['digest.js'][102]++;
  for (var i = 0; i < length; i++) {
    _$jscoverage['digest.js'][105]++;
    var part = parts[i].match(/^\s*?([a-zA-Z0-0]+)="(.*)"\s*?$/);
    _$jscoverage['digest.js'][108]++;
    if (part && part.length > 2) {
      _$jscoverage['digest.js'][109]++;
      params[part[1]] = part[2];
    }
}
  _$jscoverage['digest.js'][114]++;
  return params;
});
  _$jscoverage['digest.js'][120]++;
  HTTPDigest.prototype._compileParams = (function compileParams(params) {
  _$jscoverage['digest.js'][121]++;
  var parts = [];
  _$jscoverage['digest.js'][122]++;
  for (var i in params) {
    _$jscoverage['digest.js'][123]++;
    parts.push(i + "=\"" + params[i] + "\"");
}
  _$jscoverage['digest.js'][125]++;
  return "Digest " + parts.join(",");
});
  _$jscoverage['digest.js'][131]++;
  HTTPDigest.prototype.updateNC = (function updateNC() {
  _$jscoverage['digest.js'][132]++;
  var max = 99999999;
  _$jscoverage['digest.js'][133]++;
  this.nc++;
  _$jscoverage['digest.js'][134]++;
  if (this.nc > max) {
    _$jscoverage['digest.js'][135]++;
    this.nc = 1;
  }
  _$jscoverage['digest.js'][137]++;
  var padding = new Array(8).join("0") + "";
  _$jscoverage['digest.js'][138]++;
  var nc = this.nc + "";
  _$jscoverage['digest.js'][139]++;
  return padding.substr(0, 8 - nc.length) + nc;
});
  _$jscoverage['digest.js'][143]++;
  return HTTPDigest;
})();
_$jscoverage['digest.js'][147]++;
module.exports = (function createDigestClient(username, password) {
  _$jscoverage['digest.js'][148]++;
  return new HTTPDigest(username, password);
});
_$jscoverage['digest.js'].source = ["//","// # Digest Client","//","// Use together with HTTP Client to perform requests to servers protected","// by digest authentication.","//","","var HTTPDigest = function () {","  var crypto = require('crypto');","  var http = require('http');","","  var HTTPDigest = function (username, password) {","    this.nc = 0;","    this.username = username;","    this.password = password;","  };","","  //","  // ## Make request","  //","  // Wraps the http.request function to apply digest authorization.","  //","  HTTPDigest.prototype.request = function (options, callback) {","    var self = this;","    http.request(options, function (res) {","      self._handleResponse(options, res, callback.bind( this ));","    }).end();","  };","","  //","  // ## Handle authentication","  //","  // Parse authentication headers and set response.","  //","  HTTPDigest.prototype._handleResponse = function handleResponse(options, res, callback) {","    var challenge = this._parseChallenge(res.headers['www-authenticate']);","    var ha1 = crypto.createHash('md5');","    ha1.update([this.username, challenge.realm, this.password].join(':'));","    var ha2 = crypto.createHash('md5');","    ha2.update([options.method, options.path].join(':'));","","    // Generate cnonce","    var cnonce = false;","    var nc = false;","    if (typeof challenge.qop === 'string') {","      var cnonceHash = crypto.createHash('md5');","      cnonceHash.update(Math.random().toString(36));","      cnonce = cnonceHash.digest('hex').substr(0, 8);","      nc = this.updateNC();","    }","","    // Generate response hash","    var response = crypto.createHash('md5');","    var responseParams = [","      ha1.digest('hex'),","      challenge.nonce","    ];","","    if (cnonce) {","      responseParams.push(nc);","      responseParams.push(cnonce);","    }","","    responseParams.push(challenge.qop);","    responseParams.push(ha2.digest('hex'));","    response.update(responseParams.join(':'));","","    // Setup response parameters","    var authParams = {","      username: this.username,","      realm: challenge.realm,","      nonce: challenge.nonce,","      uri: options.path,","      qop: challenge.qop,","      response: response.digest('hex'),","      opaque: challenge.opaque","    };","    if (cnonce) {","      authParams.nc = nc;","      authParams.cnonce = cnonce;","    }","","    var headers = options.headers || {};","    headers.Authorization = this._compileParams(authParams);","    options.headers = headers;","","    http.request(options, function (res) {","      callback(res);","    }).end();","  };","","  //","  // ## Parse challenge digest","  //","  HTTPDigest.prototype._parseChallenge = function parseChallenge(digest) {","    var prefix = \"Digest \";","    var challenge = digest.substr(digest.indexOf(prefix) + prefix.length);","    var parts = challenge.split(',');","    var length = parts.length;","    var params = {};","","    for (var i = 0; i &lt; length; i++) {","","","      var part = parts[i].match(/^\\s*?([a-zA-Z0-0]+)=\"(.*)\"\\s*?$/);","","","      if ( part &amp;&amp; part.length &gt; 2) {","        params[part[1]] = part[2];","      }","","    }","","    return params;","  };","","  //","  // ## Compose authorization header","  //","  HTTPDigest.prototype._compileParams = function compileParams(params) {","    var parts = [];","    for (var i in params) {","      parts.push(i + '=\"' + params[i] + '\"');","    }","    return 'Digest ' + parts.join(',');","  };","","  //","  // ## Update and zero pad nc","  //","  HTTPDigest.prototype.updateNC = function updateNC() {","    var max = 99999999;","    this.nc++;","    if (this.nc &gt; max) {","      this.nc = 1;","    }","    var padding = new Array(8).join('0') + \"\";","    var nc = this.nc + \"\";","    return padding.substr(0, 8 - nc.length) + nc;","  };","","  // Return response handler","  return HTTPDigest;","","}();","","module.exports = function createDigestClient(username, password) {","  return new HTTPDigest(username, password);","};",""];
